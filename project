import java.io.*;
import java.util.*;

public class KMeansParallel {

    private static final int K = 3; 
    private static final int MAX_ITERATIONS = 100; 
    private static final int NUM_THREADS = 4; 

    static List<Point> points = new ArrayList<>();

    static class Point {
        double x, y;
        int cluster;

        Point(double x, double y) {
            this.x = x;
            this.y = y;
            this.cluster = -1;
        }

        double distanceTo(Point other) {
            return Math.sqrt(Math.pow(this.x - other.x, 2) + Math.pow(this.y - other.y, 2));
        }
    }

    static class Centroid {
        double x, y;

        Centroid(double x, double y) {
            this.x = x;
            this.y = y;
        }

        void update(List<Point> points) {
            if (points.isEmpty()) return;
            double sumX = 0, sumY = 0;
            for (Point p : points) {
                sumX += p.x;
                sumY += p.y;
            }
            this.x = sumX / points.size();
            this.y = sumY / points.size();
        }
    }

    static class ClusterAssignmentThread extends Thread {
        private List<Point> pointsSubset;
        private List<Centroid> centroids;

        ClusterAssignmentThread(List<Point> pointsSubset, List<Centroid> centroids) {
            this.pointsSubset = pointsSubset;
            this.centroids = centroids;
        }

        public void run() {
            for (Point p : pointsSubset) {
                double minDist = Double.MAX_VALUE;
                int closestCluster = -1;

                for (int j = 0; j < K; j++) {
                    double dist = p.distanceTo(new Point(centroids.get(j).x, centroids.get(j).y));
                    if (dist < minDist) {
                        minDist = dist;
                        closestCluster = j;
                    }
                }
                p.cluster = closestCluster;
            }
        }
    }

    public static void readData(String filePath) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(filePath));
        String line;
        while ((line = br.readLine()) != null) {
            String[] data = line.split(",");
            if (data.length == 2) {
                double x = Double.parseDouble(data[0].trim());
                double y = Double.parseDouble(data[1].trim());
                points.add(new Point(x, y));
            }
        }
        br.close();
    }

    public static void assignPointsToClustersParallel(List<Centroid> centroids) {
        int chunkSize = points.size() / NUM_THREADS;
        List<Thread> threads = new ArrayList<>();

        for (int i = 0; i < NUM_THREADS; i++) {
            int start = i * chunkSize;
            int end = (i == NUM_THREADS - 1) ? points.size() : start + chunkSize;
            List<Point> subList = points.subList(start, end);

            Thread t = new ClusterAssignmentThread(subList, centroids);
            threads.add(t);
            t.start();
        }

        for (Thread t : threads) {
            try {
                t.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public static void kMeans() {
        List<Centroid> centroids = new ArrayList<>();
        Random rand = new Random();
        for (int i = 0; i < K; i++) {
            int randomIndex = rand.nextInt(points.size());
            centroids.add(new Centroid(points.get(randomIndex).x, points.get(randomIndex).y));
        }

        for (int iteration = 0; iteration < MAX_ITERATIONS; iteration++) {
            assignPointsToClustersParallel(centroids);

            for (int i = 0; i < K; i++) {
                List<Point> clusterPoints = new ArrayList<>();
                for (Point p : points) {
                    if (p.cluster == i) {
                        clusterPoints.add(p);
                    }
                }
                centroids.get(i).update(clusterPoints);
            }

            System.out.println("Iteration " + (iteration + 1) + " completed.");
        }

        System.out.println("\nFinal Results:");
        for (Point p : points) {
            System.out.println("Point (" + p.x + ", " + p.y + ") -> Cluster " + (p.cluster + 1));
        }

        System.out.println("\nFinal Centroids:");
        for (int i = 0; i < K; i++) {
            Centroid c = centroids.get(i);
            System.out.println("Centroid " + (i + 1) + " -> (" + c.x + ", " + c.y + ")");
        }
    }

    public static void main(String[] args) throws IOException {
        String filePath = "/content/data.csv"; 
        readData(filePath);
        kMeans();
    }
}

